Time complexity : O(2^n * (n/2)*k)

class Solution {
    public boolean palindrome(int i, int j, String s){
        while(i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    public void helper(int idx, String s, List<String> ls, List<List<String>> sub){
        if(idx == s.length()){
            sub.add(new ArrayList<>(ls));
            return;
        }

        for(int i=idx;i<s.length();i++){
            if(palindrome(idx,i,s)){
                ls.add(s.substring(idx, i+1));
                helper(i+1,s,ls,sub);
                ls.remove(ls.size()-1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        List<List<String>> sub = new ArrayList<>();

        helper(0,s,new ArrayList<>(), sub);
        return sub;
    }
}
